// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/benyabooncharoen/app/ent/gender"
	"github.com/benyabooncharoen/app/ent/patient"
	"github.com/benyabooncharoen/app/ent/rightoftreatment"
	"github.com/benyabooncharoen/app/ent/systemmember"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hn holds the value of the "hn" field.
	Hn string `json:"hn,omitempty"`
	// PatientName holds the value of the "patientName" field.
	PatientName string `json:"patientName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges            PatientEdges `json:"edges"`
	Gender           *int
	Rightoftreatment *int
	Systemmember     *int
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// Gender holds the value of the gender edge.
	Gender *Gender
	// Rightoftreatment holds the value of the rightoftreatment edge.
	Rightoftreatment *Rightoftreatment
	// Systemmember holds the value of the systemmember edge.
	Systemmember *Systemmember
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[0] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// RightoftreatmentOrErr returns the Rightoftreatment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) RightoftreatmentOrErr() (*Rightoftreatment, error) {
	if e.loadedTypes[1] {
		if e.Rightoftreatment == nil {
			// The edge rightoftreatment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rightoftreatment.Label}
		}
		return e.Rightoftreatment, nil
	}
	return nil, &NotLoadedError{edge: "rightoftreatment"}
}

// SystemmemberOrErr returns the Systemmember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) SystemmemberOrErr() (*Systemmember, error) {
	if e.loadedTypes[2] {
		if e.Systemmember == nil {
			// The edge systemmember was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: systemmember.Label}
		}
		return e.Systemmember, nil
	}
	return nil, &NotLoadedError{edge: "systemmember"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // hn
		&sql.NullString{}, // patientName
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Patient) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // Gender
		&sql.NullInt64{}, // Rightoftreatment
		&sql.NullInt64{}, // Systemmember
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hn", values[0])
	} else if value.Valid {
		pa.Hn = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field patientName", values[1])
	} else if value.Valid {
		pa.PatientName = value.String
	}
	values = values[2:]
	if len(values) == len(patient.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Gender", value)
		} else if value.Valid {
			pa.Gender = new(int)
			*pa.Gender = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Rightoftreatment", value)
		} else if value.Valid {
			pa.Rightoftreatment = new(int)
			*pa.Rightoftreatment = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Systemmember", value)
		} else if value.Valid {
			pa.Systemmember = new(int)
			*pa.Systemmember = int(value.Int64)
		}
	}
	return nil
}

// QueryGender queries the gender edge of the Patient.
func (pa *Patient) QueryGender() *GenderQuery {
	return (&PatientClient{config: pa.config}).QueryGender(pa)
}

// QueryRightoftreatment queries the rightoftreatment edge of the Patient.
func (pa *Patient) QueryRightoftreatment() *RightoftreatmentQuery {
	return (&PatientClient{config: pa.config}).QueryRightoftreatment(pa)
}

// QuerySystemmember queries the systemmember edge of the Patient.
func (pa *Patient) QuerySystemmember() *SystemmemberQuery {
	return (&PatientClient{config: pa.config}).QuerySystemmember(pa)
}

// Update returns a builder for updating this Patient.
// Note that, you need to call Patient.Unwrap() before calling this method, if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return (&PatientClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", hn=")
	builder.WriteString(pa.Hn)
	builder.WriteString(", patientName=")
	builder.WriteString(pa.PatientName)
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient

func (pa Patients) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
