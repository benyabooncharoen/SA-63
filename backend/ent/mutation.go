// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/benyabooncharoen/app/ent/gender"
	"github.com/benyabooncharoen/app/ent/patient"
	"github.com/benyabooncharoen/app/ent/rightoftreatment"
	"github.com/benyabooncharoen/app/ent/systemmember"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGender           = "Gender"
	TypePatient          = "Patient"
	TypeRightoftreatment = "Rightoftreatment"
	TypeSystemmember     = "Systemmember"
)

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op              Op
	typ             string
	id              *int
	genderName      *string
	clearedFields   map[string]struct{}
	patients        map[int]struct{}
	removedpatients map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGenderName sets the genderName field.
func (m *GenderMutation) SetGenderName(s string) {
	m.genderName = &s
}

// GenderName returns the genderName value in the mutation.
func (m *GenderMutation) GenderName() (r string, exists bool) {
	v := m.genderName
	if v == nil {
		return
	}
	return *v, true
}

// OldGenderName returns the old genderName value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldGenderName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGenderName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGenderName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenderName: %w", err)
	}
	return oldValue.GenderName, nil
}

// ResetGenderName reset all changes of the "genderName" field.
func (m *GenderMutation) ResetGenderName() {
	m.genderName = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *GenderMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *GenderMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *GenderMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *GenderMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *GenderMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.genderName != nil {
		fields = append(fields, gender.FieldGenderName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldGenderName:
		return m.GenderName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldGenderName:
		return m.OldGenderName(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldGenderName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenderName(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldGenderName:
		m.ResetGenderName()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, gender.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, gender.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	hn                      *string
	patientName             *string
	clearedFields           map[string]struct{}
	gender                  *int
	clearedgender           bool
	rightoftreatment        *int
	clearedrightoftreatment bool
	systemmember            *int
	clearedsystemmember     bool
	done                    bool
	oldValue                func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHn sets the hn field.
func (m *PatientMutation) SetHn(s string) {
	m.hn = &s
}

// Hn returns the hn value in the mutation.
func (m *PatientMutation) Hn() (r string, exists bool) {
	v := m.hn
	if v == nil {
		return
	}
	return *v, true
}

// OldHn returns the old hn value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldHn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHn is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHn: %w", err)
	}
	return oldValue.Hn, nil
}

// ResetHn reset all changes of the "hn" field.
func (m *PatientMutation) ResetHn() {
	m.hn = nil
}

// SetPatientName sets the patientName field.
func (m *PatientMutation) SetPatientName(s string) {
	m.patientName = &s
}

// PatientName returns the patientName value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m.patientName
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old patientName value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "patientName" field.
func (m *PatientMutation) ResetPatientName() {
	m.patientName = nil
}

// SetGenderID sets the gender edge to Gender by id.
func (m *PatientMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *PatientMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *PatientMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *PatientMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// SetRightoftreatmentID sets the rightoftreatment edge to Rightoftreatment by id.
func (m *PatientMutation) SetRightoftreatmentID(id int) {
	m.rightoftreatment = &id
}

// ClearRightoftreatment clears the rightoftreatment edge to Rightoftreatment.
func (m *PatientMutation) ClearRightoftreatment() {
	m.clearedrightoftreatment = true
}

// RightoftreatmentCleared returns if the edge rightoftreatment was cleared.
func (m *PatientMutation) RightoftreatmentCleared() bool {
	return m.clearedrightoftreatment
}

// RightoftreatmentID returns the rightoftreatment id in the mutation.
func (m *PatientMutation) RightoftreatmentID() (id int, exists bool) {
	if m.rightoftreatment != nil {
		return *m.rightoftreatment, true
	}
	return
}

// RightoftreatmentIDs returns the rightoftreatment ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RightoftreatmentID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) RightoftreatmentIDs() (ids []int) {
	if id := m.rightoftreatment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRightoftreatment reset all changes of the "rightoftreatment" edge.
func (m *PatientMutation) ResetRightoftreatment() {
	m.rightoftreatment = nil
	m.clearedrightoftreatment = false
}

// SetSystemmemberID sets the systemmember edge to Systemmember by id.
func (m *PatientMutation) SetSystemmemberID(id int) {
	m.systemmember = &id
}

// ClearSystemmember clears the systemmember edge to Systemmember.
func (m *PatientMutation) ClearSystemmember() {
	m.clearedsystemmember = true
}

// SystemmemberCleared returns if the edge systemmember was cleared.
func (m *PatientMutation) SystemmemberCleared() bool {
	return m.clearedsystemmember
}

// SystemmemberID returns the systemmember id in the mutation.
func (m *PatientMutation) SystemmemberID() (id int, exists bool) {
	if m.systemmember != nil {
		return *m.systemmember, true
	}
	return
}

// SystemmemberIDs returns the systemmember ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SystemmemberID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) SystemmemberIDs() (ids []int) {
	if id := m.systemmember; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSystemmember reset all changes of the "systemmember" edge.
func (m *PatientMutation) ResetSystemmember() {
	m.systemmember = nil
	m.clearedsystemmember = false
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.hn != nil {
		fields = append(fields, patient.FieldHn)
	}
	if m.patientName != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldHn:
		return m.Hn()
	case patient.FieldPatientName:
		return m.PatientName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldHn:
		return m.OldHn(ctx)
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldHn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHn(v)
		return nil
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldHn:
		m.ResetHn()
		return nil
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.gender != nil {
		edges = append(edges, patient.EdgeGender)
	}
	if m.rightoftreatment != nil {
		edges = append(edges, patient.EdgeRightoftreatment)
	}
	if m.systemmember != nil {
		edges = append(edges, patient.EdgeSystemmember)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeRightoftreatment:
		if id := m.rightoftreatment; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeSystemmember:
		if id := m.systemmember; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgender {
		edges = append(edges, patient.EdgeGender)
	}
	if m.clearedrightoftreatment {
		edges = append(edges, patient.EdgeRightoftreatment)
	}
	if m.clearedsystemmember {
		edges = append(edges, patient.EdgeSystemmember)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeGender:
		return m.clearedgender
	case patient.EdgeRightoftreatment:
		return m.clearedrightoftreatment
	case patient.EdgeSystemmember:
		return m.clearedsystemmember
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	case patient.EdgeGender:
		m.ClearGender()
		return nil
	case patient.EdgeRightoftreatment:
		m.ClearRightoftreatment()
		return nil
	case patient.EdgeSystemmember:
		m.ClearSystemmember()
		return nil
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeGender:
		m.ResetGender()
		return nil
	case patient.EdgeRightoftreatment:
		m.ResetRightoftreatment()
		return nil
	case patient.EdgeSystemmember:
		m.ResetSystemmember()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// RightoftreatmentMutation represents an operation that mutate the Rightoftreatments
// nodes in the graph.
type RightoftreatmentMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	rightoftreatmentName *string
	clearedFields        map[string]struct{}
	patients             map[int]struct{}
	removedpatients      map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Rightoftreatment, error)
}

var _ ent.Mutation = (*RightoftreatmentMutation)(nil)

// rightoftreatmentOption allows to manage the mutation configuration using functional options.
type rightoftreatmentOption func(*RightoftreatmentMutation)

// newRightoftreatmentMutation creates new mutation for $n.Name.
func newRightoftreatmentMutation(c config, op Op, opts ...rightoftreatmentOption) *RightoftreatmentMutation {
	m := &RightoftreatmentMutation{
		config:        c,
		op:            op,
		typ:           TypeRightoftreatment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRightoftreatmentID sets the id field of the mutation.
func withRightoftreatmentID(id int) rightoftreatmentOption {
	return func(m *RightoftreatmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Rightoftreatment
		)
		m.oldValue = func(ctx context.Context) (*Rightoftreatment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rightoftreatment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRightoftreatment sets the old Rightoftreatment of the mutation.
func withRightoftreatment(node *Rightoftreatment) rightoftreatmentOption {
	return func(m *RightoftreatmentMutation) {
		m.oldValue = func(context.Context) (*Rightoftreatment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RightoftreatmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RightoftreatmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RightoftreatmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRightoftreatmentName sets the rightoftreatmentName field.
func (m *RightoftreatmentMutation) SetRightoftreatmentName(s string) {
	m.rightoftreatmentName = &s
}

// RightoftreatmentName returns the rightoftreatmentName value in the mutation.
func (m *RightoftreatmentMutation) RightoftreatmentName() (r string, exists bool) {
	v := m.rightoftreatmentName
	if v == nil {
		return
	}
	return *v, true
}

// OldRightoftreatmentName returns the old rightoftreatmentName value of the Rightoftreatment.
// If the Rightoftreatment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RightoftreatmentMutation) OldRightoftreatmentName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRightoftreatmentName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRightoftreatmentName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRightoftreatmentName: %w", err)
	}
	return oldValue.RightoftreatmentName, nil
}

// ResetRightoftreatmentName reset all changes of the "rightoftreatmentName" field.
func (m *RightoftreatmentMutation) ResetRightoftreatmentName() {
	m.rightoftreatmentName = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *RightoftreatmentMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *RightoftreatmentMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *RightoftreatmentMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *RightoftreatmentMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *RightoftreatmentMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *RightoftreatmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rightoftreatment).
func (m *RightoftreatmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RightoftreatmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.rightoftreatmentName != nil {
		fields = append(fields, rightoftreatment.FieldRightoftreatmentName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RightoftreatmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rightoftreatment.FieldRightoftreatmentName:
		return m.RightoftreatmentName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RightoftreatmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rightoftreatment.FieldRightoftreatmentName:
		return m.OldRightoftreatmentName(ctx)
	}
	return nil, fmt.Errorf("unknown Rightoftreatment field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RightoftreatmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rightoftreatment.FieldRightoftreatmentName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRightoftreatmentName(v)
		return nil
	}
	return fmt.Errorf("unknown Rightoftreatment field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RightoftreatmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RightoftreatmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RightoftreatmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rightoftreatment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RightoftreatmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RightoftreatmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RightoftreatmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rightoftreatment nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RightoftreatmentMutation) ResetField(name string) error {
	switch name {
	case rightoftreatment.FieldRightoftreatmentName:
		m.ResetRightoftreatmentName()
		return nil
	}
	return fmt.Errorf("unknown Rightoftreatment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RightoftreatmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, rightoftreatment.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RightoftreatmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rightoftreatment.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RightoftreatmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, rightoftreatment.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RightoftreatmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rightoftreatment.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RightoftreatmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RightoftreatmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RightoftreatmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rightoftreatment unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RightoftreatmentMutation) ResetEdge(name string) error {
	switch name {
	case rightoftreatment.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Rightoftreatment edge %s", name)
}

// SystemmemberMutation represents an operation that mutate the Systemmembers
// nodes in the graph.
type SystemmemberMutation struct {
	config
	op               Op
	typ              string
	id               *int
	systemmemberName *string
	_Password        *string
	clearedFields    map[string]struct{}
	patients         map[int]struct{}
	removedpatients  map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Systemmember, error)
}

var _ ent.Mutation = (*SystemmemberMutation)(nil)

// systemmemberOption allows to manage the mutation configuration using functional options.
type systemmemberOption func(*SystemmemberMutation)

// newSystemmemberMutation creates new mutation for $n.Name.
func newSystemmemberMutation(c config, op Op, opts ...systemmemberOption) *SystemmemberMutation {
	m := &SystemmemberMutation{
		config:        c,
		op:            op,
		typ:           TypeSystemmember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSystemmemberID sets the id field of the mutation.
func withSystemmemberID(id int) systemmemberOption {
	return func(m *SystemmemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Systemmember
		)
		m.oldValue = func(ctx context.Context) (*Systemmember, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Systemmember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSystemmember sets the old Systemmember of the mutation.
func withSystemmember(node *Systemmember) systemmemberOption {
	return func(m *SystemmemberMutation) {
		m.oldValue = func(context.Context) (*Systemmember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SystemmemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SystemmemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SystemmemberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSystemmemberName sets the systemmemberName field.
func (m *SystemmemberMutation) SetSystemmemberName(s string) {
	m.systemmemberName = &s
}

// SystemmemberName returns the systemmemberName value in the mutation.
func (m *SystemmemberMutation) SystemmemberName() (r string, exists bool) {
	v := m.systemmemberName
	if v == nil {
		return
	}
	return *v, true
}

// OldSystemmemberName returns the old systemmemberName value of the Systemmember.
// If the Systemmember object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SystemmemberMutation) OldSystemmemberName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSystemmemberName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSystemmemberName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystemmemberName: %w", err)
	}
	return oldValue.SystemmemberName, nil
}

// ResetSystemmemberName reset all changes of the "systemmemberName" field.
func (m *SystemmemberMutation) ResetSystemmemberName() {
	m.systemmemberName = nil
}

// SetPassword sets the Password field.
func (m *SystemmemberMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *SystemmemberMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the Systemmember.
// If the Systemmember object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SystemmemberMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *SystemmemberMutation) ResetPassword() {
	m._Password = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *SystemmemberMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *SystemmemberMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *SystemmemberMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *SystemmemberMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *SystemmemberMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *SystemmemberMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Systemmember).
func (m *SystemmemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SystemmemberMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.systemmemberName != nil {
		fields = append(fields, systemmember.FieldSystemmemberName)
	}
	if m._Password != nil {
		fields = append(fields, systemmember.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SystemmemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case systemmember.FieldSystemmemberName:
		return m.SystemmemberName()
	case systemmember.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SystemmemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case systemmember.FieldSystemmemberName:
		return m.OldSystemmemberName(ctx)
	case systemmember.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Systemmember field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemmemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case systemmember.FieldSystemmemberName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystemmemberName(v)
		return nil
	case systemmember.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Systemmember field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SystemmemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SystemmemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemmemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Systemmember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SystemmemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SystemmemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SystemmemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Systemmember nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SystemmemberMutation) ResetField(name string) error {
	switch name {
	case systemmember.FieldSystemmemberName:
		m.ResetSystemmemberName()
		return nil
	case systemmember.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Systemmember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SystemmemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, systemmember.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SystemmemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case systemmember.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SystemmemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, systemmember.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SystemmemberMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case systemmember.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SystemmemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SystemmemberMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SystemmemberMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Systemmember unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SystemmemberMutation) ResetEdge(name string) error {
	switch name {
	case systemmember.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Systemmember edge %s", name)
}
