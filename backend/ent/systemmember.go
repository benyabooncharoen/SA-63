// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/benyabooncharoen/app/ent/systemmember"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Systemmember is the model entity for the Systemmember schema.
type Systemmember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SystemmemberName holds the value of the "systemmemberName" field.
	SystemmemberName string `json:"systemmemberName,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"Password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemmemberQuery when eager-loading is set.
	Edges SystemmemberEdges `json:"edges"`
}

// SystemmemberEdges holds the relations/edges for other nodes in the graph.
type SystemmemberEdges struct {
	// Patients holds the value of the patients edge.
	Patients []*Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PatientsOrErr returns the Patients value or an error if the edge
// was not loaded in eager-loading.
func (e SystemmemberEdges) PatientsOrErr() ([]*Patient, error) {
	if e.loadedTypes[0] {
		return e.Patients, nil
	}
	return nil, &NotLoadedError{edge: "patients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Systemmember) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // systemmemberName
		&sql.NullString{}, // Password
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Systemmember fields.
func (s *Systemmember) assignValues(values ...interface{}) error {
	if m, n := len(values), len(systemmember.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field systemmemberName", values[0])
	} else if value.Valid {
		s.SystemmemberName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Password", values[1])
	} else if value.Valid {
		s.Password = value.String
	}
	return nil
}

// QueryPatients queries the patients edge of the Systemmember.
func (s *Systemmember) QueryPatients() *PatientQuery {
	return (&SystemmemberClient{config: s.config}).QueryPatients(s)
}

// Update returns a builder for updating this Systemmember.
// Note that, you need to call Systemmember.Unwrap() before calling this method, if this Systemmember
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Systemmember) Update() *SystemmemberUpdateOne {
	return (&SystemmemberClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Systemmember) Unwrap() *Systemmember {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Systemmember is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Systemmember) String() string {
	var builder strings.Builder
	builder.WriteString("Systemmember(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", systemmemberName=")
	builder.WriteString(s.SystemmemberName)
	builder.WriteString(", Password=")
	builder.WriteString(s.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Systemmembers is a parsable slice of Systemmember.
type Systemmembers []*Systemmember

func (s Systemmembers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
