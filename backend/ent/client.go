// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/benyabooncharoen/app/ent/migrate"

	"github.com/benyabooncharoen/app/ent/gender"
	"github.com/benyabooncharoen/app/ent/patient"
	"github.com/benyabooncharoen/app/ent/rightoftreatment"
	"github.com/benyabooncharoen/app/ent/systemmember"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Gender is the client for interacting with the Gender builders.
	Gender *GenderClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Rightoftreatment is the client for interacting with the Rightoftreatment builders.
	Rightoftreatment *RightoftreatmentClient
	// Systemmember is the client for interacting with the Systemmember builders.
	Systemmember *SystemmemberClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Gender = NewGenderClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Rightoftreatment = NewRightoftreatmentClient(c.config)
	c.Systemmember = NewSystemmemberClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Gender:           NewGenderClient(cfg),
		Patient:          NewPatientClient(cfg),
		Rightoftreatment: NewRightoftreatmentClient(cfg),
		Systemmember:     NewSystemmemberClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:           cfg,
		Gender:           NewGenderClient(cfg),
		Patient:          NewPatientClient(cfg),
		Rightoftreatment: NewRightoftreatmentClient(cfg),
		Systemmember:     NewSystemmemberClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Gender.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Gender.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Rightoftreatment.Use(hooks...)
	c.Systemmember.Use(hooks...)
}

// GenderClient is a client for the Gender schema.
type GenderClient struct {
	config
}

// NewGenderClient returns a client for the Gender from the given config.
func NewGenderClient(c config) *GenderClient {
	return &GenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gender.Hooks(f(g(h())))`.
func (c *GenderClient) Use(hooks ...Hook) {
	c.hooks.Gender = append(c.hooks.Gender, hooks...)
}

// Create returns a create builder for Gender.
func (c *GenderClient) Create() *GenderCreate {
	mutation := newGenderMutation(c.config, OpCreate)
	return &GenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Gender.
func (c *GenderClient) Update() *GenderUpdate {
	mutation := newGenderMutation(c.config, OpUpdate)
	return &GenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenderClient) UpdateOne(ge *Gender) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGender(ge))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenderClient) UpdateOneID(id int) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGenderID(id))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gender.
func (c *GenderClient) Delete() *GenderDelete {
	mutation := newGenderMutation(c.config, OpDelete)
	return &GenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GenderClient) DeleteOne(ge *Gender) *GenderDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GenderClient) DeleteOneID(id int) *GenderDeleteOne {
	builder := c.Delete().Where(gender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenderDeleteOne{builder}
}

// Create returns a query builder for Gender.
func (c *GenderClient) Query() *GenderQuery {
	return &GenderQuery{config: c.config}
}

// Get returns a Gender entity by its id.
func (c *GenderClient) Get(ctx context.Context, id int) (*Gender, error) {
	return c.Query().Where(gender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenderClient) GetX(ctx context.Context, id int) *Gender {
	ge, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ge
}

// QueryPatients queries the patients edge of a Gender.
func (c *GenderClient) QueryPatients(ge *Gender) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gender.Table, gender.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gender.PatientsTable, gender.PatientsColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenderClient) Hooks() []Hook {
	return c.hooks.Gender
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryGender queries the gender edge of a Patient.
func (c *PatientClient) QueryGender(pa *Patient) *GenderQuery {
	query := &GenderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(gender.Table, gender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.GenderTable, patient.GenderColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRightoftreatment queries the rightoftreatment edge of a Patient.
func (c *PatientClient) QueryRightoftreatment(pa *Patient) *RightoftreatmentQuery {
	query := &RightoftreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(rightoftreatment.Table, rightoftreatment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.RightoftreatmentTable, patient.RightoftreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySystemmember queries the systemmember edge of a Patient.
func (c *PatientClient) QuerySystemmember(pa *Patient) *SystemmemberQuery {
	query := &SystemmemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(systemmember.Table, systemmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.SystemmemberTable, patient.SystemmemberColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// RightoftreatmentClient is a client for the Rightoftreatment schema.
type RightoftreatmentClient struct {
	config
}

// NewRightoftreatmentClient returns a client for the Rightoftreatment from the given config.
func NewRightoftreatmentClient(c config) *RightoftreatmentClient {
	return &RightoftreatmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rightoftreatment.Hooks(f(g(h())))`.
func (c *RightoftreatmentClient) Use(hooks ...Hook) {
	c.hooks.Rightoftreatment = append(c.hooks.Rightoftreatment, hooks...)
}

// Create returns a create builder for Rightoftreatment.
func (c *RightoftreatmentClient) Create() *RightoftreatmentCreate {
	mutation := newRightoftreatmentMutation(c.config, OpCreate)
	return &RightoftreatmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Rightoftreatment.
func (c *RightoftreatmentClient) Update() *RightoftreatmentUpdate {
	mutation := newRightoftreatmentMutation(c.config, OpUpdate)
	return &RightoftreatmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RightoftreatmentClient) UpdateOne(r *Rightoftreatment) *RightoftreatmentUpdateOne {
	mutation := newRightoftreatmentMutation(c.config, OpUpdateOne, withRightoftreatment(r))
	return &RightoftreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RightoftreatmentClient) UpdateOneID(id int) *RightoftreatmentUpdateOne {
	mutation := newRightoftreatmentMutation(c.config, OpUpdateOne, withRightoftreatmentID(id))
	return &RightoftreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rightoftreatment.
func (c *RightoftreatmentClient) Delete() *RightoftreatmentDelete {
	mutation := newRightoftreatmentMutation(c.config, OpDelete)
	return &RightoftreatmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RightoftreatmentClient) DeleteOne(r *Rightoftreatment) *RightoftreatmentDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RightoftreatmentClient) DeleteOneID(id int) *RightoftreatmentDeleteOne {
	builder := c.Delete().Where(rightoftreatment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RightoftreatmentDeleteOne{builder}
}

// Create returns a query builder for Rightoftreatment.
func (c *RightoftreatmentClient) Query() *RightoftreatmentQuery {
	return &RightoftreatmentQuery{config: c.config}
}

// Get returns a Rightoftreatment entity by its id.
func (c *RightoftreatmentClient) Get(ctx context.Context, id int) (*Rightoftreatment, error) {
	return c.Query().Where(rightoftreatment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RightoftreatmentClient) GetX(ctx context.Context, id int) *Rightoftreatment {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryPatients queries the patients edge of a Rightoftreatment.
func (c *RightoftreatmentClient) QueryPatients(r *Rightoftreatment) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rightoftreatment.Table, rightoftreatment.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rightoftreatment.PatientsTable, rightoftreatment.PatientsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RightoftreatmentClient) Hooks() []Hook {
	return c.hooks.Rightoftreatment
}

// SystemmemberClient is a client for the Systemmember schema.
type SystemmemberClient struct {
	config
}

// NewSystemmemberClient returns a client for the Systemmember from the given config.
func NewSystemmemberClient(c config) *SystemmemberClient {
	return &SystemmemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemmember.Hooks(f(g(h())))`.
func (c *SystemmemberClient) Use(hooks ...Hook) {
	c.hooks.Systemmember = append(c.hooks.Systemmember, hooks...)
}

// Create returns a create builder for Systemmember.
func (c *SystemmemberClient) Create() *SystemmemberCreate {
	mutation := newSystemmemberMutation(c.config, OpCreate)
	return &SystemmemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Systemmember.
func (c *SystemmemberClient) Update() *SystemmemberUpdate {
	mutation := newSystemmemberMutation(c.config, OpUpdate)
	return &SystemmemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemmemberClient) UpdateOne(s *Systemmember) *SystemmemberUpdateOne {
	mutation := newSystemmemberMutation(c.config, OpUpdateOne, withSystemmember(s))
	return &SystemmemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemmemberClient) UpdateOneID(id int) *SystemmemberUpdateOne {
	mutation := newSystemmemberMutation(c.config, OpUpdateOne, withSystemmemberID(id))
	return &SystemmemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Systemmember.
func (c *SystemmemberClient) Delete() *SystemmemberDelete {
	mutation := newSystemmemberMutation(c.config, OpDelete)
	return &SystemmemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemmemberClient) DeleteOne(s *Systemmember) *SystemmemberDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemmemberClient) DeleteOneID(id int) *SystemmemberDeleteOne {
	builder := c.Delete().Where(systemmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemmemberDeleteOne{builder}
}

// Create returns a query builder for Systemmember.
func (c *SystemmemberClient) Query() *SystemmemberQuery {
	return &SystemmemberQuery{config: c.config}
}

// Get returns a Systemmember entity by its id.
func (c *SystemmemberClient) Get(ctx context.Context, id int) (*Systemmember, error) {
	return c.Query().Where(systemmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemmemberClient) GetX(ctx context.Context, id int) *Systemmember {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryPatients queries the patients edge of a Systemmember.
func (c *SystemmemberClient) QueryPatients(s *Systemmember) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(systemmember.Table, systemmember.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, systemmember.PatientsTable, systemmember.PatientsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SystemmemberClient) Hooks() []Hook {
	return c.hooks.Systemmember
}
