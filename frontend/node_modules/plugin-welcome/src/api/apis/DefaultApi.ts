/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersPatient,
    ControllersPatientFromJSON,
    ControllersPatientToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntRightoftreatment,
    EntRightoftreatmentFromJSON,
    EntRightoftreatmentToJSON,
    EntSystemmember,
    EntSystemmemberFromJSON,
    EntSystemmemberToJSON,
} from '../models';

export interface CreateGenderRequest {
    gender: EntGender;
}

export interface CreatePatientRequest {
    patient: ControllersPatient;
}

export interface CreateRightoftreatmentRequest {
    rightoftreatment: EntRightoftreatment;
}

export interface CreateSystemmemberRequest {
    systemmember: EntSystemmember;
}

export interface DeleteGenderRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeleteRightoftreatmentRequest {
    id: number;
}

export interface DeleteSystemmemberRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetRightoftreatmentRequest {
    id: number;
}

export interface GetSystemmemberRequest {
    id: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListRightoftreatmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListSystemmemberRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<EntGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<ControllersPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<ControllersPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create rightoftreatment
     * Create rightoftreatment
     */
    async createRightoftreatmentRaw(requestParameters: CreateRightoftreatmentRequest): Promise<runtime.ApiResponse<EntRightoftreatment>> {
        if (requestParameters.rightoftreatment === null || requestParameters.rightoftreatment === undefined) {
            throw new runtime.RequiredError('rightoftreatment','Required parameter requestParameters.rightoftreatment was null or undefined when calling createRightoftreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rightoftreatments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRightoftreatmentToJSON(requestParameters.rightoftreatment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightoftreatmentFromJSON(jsonValue));
    }

    /**
     * Create rightoftreatment
     * Create rightoftreatment
     */
    async createRightoftreatment(requestParameters: CreateRightoftreatmentRequest): Promise<EntRightoftreatment> {
        const response = await this.createRightoftreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create systemmember
     * Create systemmember
     */
    async createSystemmemberRaw(requestParameters: CreateSystemmemberRequest): Promise<runtime.ApiResponse<EntSystemmember>> {
        if (requestParameters.systemmember === null || requestParameters.systemmember === undefined) {
            throw new runtime.RequiredError('systemmember','Required parameter requestParameters.systemmember was null or undefined when calling createSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/systemmembers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSystemmemberToJSON(requestParameters.systemmember),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSystemmemberFromJSON(jsonValue));
    }

    /**
     * Create systemmember
     * Create systemmember
     */
    async createSystemmember(requestParameters: CreateSystemmemberRequest): Promise<EntSystemmember> {
        const response = await this.createSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGenderRaw(requestParameters: DeleteGenderRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gender/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGender(requestParameters: DeleteGenderRequest): Promise<object> {
        const response = await this.deleteGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get rightoftreatment by ID
     * Delete a rightoftreatment entity by ID
     */
    async deleteRightoftreatmentRaw(requestParameters: DeleteRightoftreatmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRightoftreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rightoftreatment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get rightoftreatment by ID
     * Delete a rightoftreatment entity by ID
     */
    async deleteRightoftreatment(requestParameters: DeleteRightoftreatmentRequest): Promise<object> {
        const response = await this.deleteRightoftreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get systemmember by ID
     * Delete a systemmember entity by ID
     */
    async deleteSystemmemberRaw(requestParameters: DeleteSystemmemberRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmember/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get systemmember by ID
     * Delete a systemmember entity by ID
     */
    async deleteSystemmember(requestParameters: DeleteSystemmemberRequest): Promise<object> {
        const response = await this.deleteSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get rightoftreatment by ID
     * Get a rightoftreatment entity by ID
     */
    async getRightoftreatmentRaw(requestParameters: GetRightoftreatmentRequest): Promise<runtime.ApiResponse<EntRightoftreatment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRightoftreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rightoftreatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightoftreatmentFromJSON(jsonValue));
    }

    /**
     * get rightoftreatment by ID
     * Get a rightoftreatment entity by ID
     */
    async getRightoftreatment(requestParameters: GetRightoftreatmentRequest): Promise<EntRightoftreatment> {
        const response = await this.getRightoftreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get systemmember by ID
     * Get a systemmember entity by ID
     */
    async getSystemmemberRaw(requestParameters: GetSystemmemberRequest): Promise<runtime.ApiResponse<EntSystemmember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSystemmemberFromJSON(jsonValue));
    }

    /**
     * get systemmember by ID
     * Get a systemmember entity by ID
     */
    async getSystemmember(requestParameters: GetSystemmemberRequest): Promise<EntSystemmember> {
        const response = await this.getSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list rightoftreatment entities
     * List rightoftreatment entities
     */
    async listRightoftreatmentRaw(requestParameters: ListRightoftreatmentRequest): Promise<runtime.ApiResponse<Array<EntRightoftreatment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rightoftreatments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRightoftreatmentFromJSON));
    }

    /**
     * list rightoftreatment entities
     * List rightoftreatment entities
     */
    async listRightoftreatment(requestParameters: ListRightoftreatmentRequest): Promise<Array<EntRightoftreatment>> {
        const response = await this.listRightoftreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list systemmember entities
     * List systemmember entities
     */
    async listSystemmemberRaw(requestParameters: ListSystemmemberRequest): Promise<runtime.ApiResponse<Array<EntSystemmember>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmembers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSystemmemberFromJSON));
    }

    /**
     * list systemmember entities
     * List systemmember entities
     */
    async listSystemmember(requestParameters: ListSystemmemberRequest): Promise<Array<EntSystemmember>> {
        const response = await this.listSystemmemberRaw(requestParameters);
        return await response.value();
    }

}
